{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "30322d6f-5eeb-4f9f-8a86-1baa113c31e2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Contact Management System\n",
      "1. Add Contact\n",
      "2. View Contact List\n",
      "3. Search Contact\n",
      "4. Update Contact\n",
      "5. Delete Contact\n",
      "6. Exit\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Choose an option:  1\n",
      "Enter name:  add contact\n",
      "Enter phone number:  8096106433\n",
      "Enter email:  poojakankipati19@gmail.com\n",
      "Enter address:  allavaram\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Contact added successfully.\n",
      "\n",
      "Contact Management System\n",
      "1. Add Contact\n",
      "2. View Contact List\n",
      "3. Search Contact\n",
      "4. Update Contact\n",
      "5. Delete Contact\n",
      "6. Exit\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Choose an option:  2\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Contact List:\n",
      "Name: add contact, Phone: 8096106433\n",
      "\n",
      "Contact Management System\n",
      "1. Add Contact\n",
      "2. View Contact List\n",
      "3. Search Contact\n",
      "4. Update Contact\n",
      "5. Delete Contact\n",
      "6. Exit\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Choose an option:  3\n",
      "Enter name or phone number to search:  8096106433\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Name: add contact\n",
      "Phone: 8096106433\n",
      "Email: poojakankipati19@gmail.com\n",
      "Address: allavaram\n",
      "\n",
      "Contact Management System\n",
      "1. Add Contact\n",
      "2. View Contact List\n",
      "3. Search Contact\n",
      "4. Update Contact\n",
      "5. Delete Contact\n",
      "6. Exit\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Choose an option:  4\n",
      "Enter the name of the contact to update:  add contact\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Updating contact: add contact\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter new phone number:  6305969846\n",
      "Enter new email:  jigee@gmail.com\n",
      "Enter new address:  amalapuram\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Contact updated successfully.\n",
      "\n",
      "Contact Management System\n",
      "1. Add Contact\n",
      "2. View Contact List\n",
      "3. Search Contact\n",
      "4. Update Contact\n",
      "5. Delete Contact\n",
      "6. Exit\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Choose an option:  5\n",
      "Enter the name of the contact to delete:  add contact\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Contact deleted successfully.\n",
      "\n",
      "Contact Management System\n",
      "1. Add Contact\n",
      "2. View Contact List\n",
      "3. Search Contact\n",
      "4. Update Contact\n",
      "5. Delete Contact\n",
      "6. Exit\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Choose an option:  6\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Exiting Contact Management System. Goodbye!\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "class Contact:\n",
    "    def __init__(self, name, phone, email, address):\n",
    "        self.name = name\n",
    "        self.phone = phone\n",
    "        self.email = email\n",
    "        self.address = address\n",
    "\n",
    "class ContactManager:\n",
    "    def __init__(self):\n",
    "        self.contacts = {}\n",
    "\n",
    "    def add_contact(self, name, phone, email, address):\n",
    "        if name in self.contacts:\n",
    "            print(\"Contact with this name already exists.\")\n",
    "        else:\n",
    "            self.contacts[name] = Contact(name, phone, email, address)\n",
    "            print(\"Contact added successfully.\")\n",
    "\n",
    "    def view_contacts(self):\n",
    "        if not self.contacts:\n",
    "            print(\"No contacts available.\")\n",
    "        else:\n",
    "            print(\"\\nContact List:\")\n",
    "            for name, contact in self.contacts.items():\n",
    "                print(f\"Name: {contact.name}, Phone: {contact.phone}\")\n",
    "\n",
    "    def search_contact(self, query):\n",
    "        results = [contact for contact in self.contacts.values() if query.lower() in contact.name.lower() or query in contact.phone]\n",
    "        if results:\n",
    "            for contact in results:\n",
    "                print(f\"\\nName: {contact.name}\")\n",
    "                print(f\"Phone: {contact.phone}\")\n",
    "                print(f\"Email: {contact.email}\")\n",
    "                print(f\"Address: {contact.address}\")\n",
    "        else:\n",
    "            print(\"No contacts found.\")\n",
    "\n",
    "    def update_contact(self, name):\n",
    "        if name in self.contacts:\n",
    "            print(f\"Updating contact: {name}\")\n",
    "            phone = input(\"Enter new phone number: \")\n",
    "            email = input(\"Enter new email: \")\n",
    "            address = input(\"Enter new address: \")\n",
    "            self.contacts[name].phone = phone\n",
    "            self.contacts[name].email = email\n",
    "            self.contacts[name].address = address\n",
    "            print(\"Contact updated successfully.\")\n",
    "        else:\n",
    "            print(\"Contact not found.\")\n",
    "\n",
    "    def delete_contact(self, name):\n",
    "        if name in self.contacts:\n",
    "            del self.contacts[name]\n",
    "            print(\"Contact deleted successfully.\")\n",
    "        else:\n",
    "            print(\"Contact not found.\")\n",
    "\n",
    "def validate_email(email):\n",
    "    email_regex = r'^\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b'\n",
    "    return re.match(email_regex, email)\n",
    "\n",
    "def main():\n",
    "    manager = ContactManager()\n",
    "\n",
    "    while True:\n",
    "        print(\"\\nContact Management System\")\n",
    "        print(\"1. Add Contact\")\n",
    "        print(\"2. View Contact List\")\n",
    "        print(\"3. Search Contact\")\n",
    "        print(\"4. Update Contact\")\n",
    "        print(\"5. Delete Contact\")\n",
    "        print(\"6. Exit\")\n",
    "\n",
    "        choice = input(\"Choose an option: \")\n",
    "\n",
    "        if choice == '1':\n",
    "            name = input(\"Enter name: \")\n",
    "            phone = input(\"Enter phone number: \")\n",
    "            email = input(\"Enter email: \")\n",
    "            if not validate_email(email):\n",
    "                print(\"Invalid email format.\")\n",
    "                continue\n",
    "            address = input(\"Enter address: \")\n",
    "            manager.add_contact(name, phone, email, address)\n",
    "        elif choice == '2':\n",
    "            manager.view_contacts()\n",
    "        elif choice == '3':\n",
    "            query = input(\"Enter name or phone number to search: \")\n",
    "            manager.search_contact(query)\n",
    "        elif choice == '4':\n",
    "            name = input(\"Enter the name of the contact to update: \")\n",
    "            manager.update_contact(name)\n",
    "        elif choice == '5':\n",
    "            name = input(\"Enter the name of the contact to delete: \")\n",
    "            manager.delete_contact(name)\n",
    "        elif choice == '6':\n",
    "            print(\"Exiting Contact Management System. Goodbye!\")\n",
    "            break\n",
    "        else:\n",
    "            print(\"Invalid choice. Please try again.\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1bce5dbb-4eca-4691-bf1a-13d2f241a73c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
